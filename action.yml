name: Setup PostgreSQL for Linux/macOS/Windows
author: Ihor Kalnytskyi
description: Setup a preinstalled PostgreSQL server.
branding:
  icon: database
  color: purple
inputs:
  username:
    description: The username of the user to setup.
    default: postgres
    required: false
  password:
    description: The password of the user to setup.
    default: postgres
    required: false
  database:
    description: The database name to setup and grant permissions to created user.
    default: postgres
    required: false
  port:
    description: The server port to listen on.
    default: "5432"
    required: false
outputs:
  connection-uri:
    description: The connection URI to connect to PostgreSQL.
    value: ${{ steps.connection-uri.outputs.value }}
runs:
  using: composite
  steps:
    - name: Prerequisites
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          echo "$(pg_config --bindir)" >> $GITHUB_PATH
        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo "$PGBIN" >> $GITHUB_PATH
          echo "PQ_LIB_DIR=$PGROOT\lib" >> $GITHUB_ENV
        fi
      shell: bash


    - name: Setup and start PostgreSQL
      run: |
        export PGDATA="$RUNNER_TEMP/pgdata"
        export PWFILE="$RUNNER_TEMP/pwfile"

        # Save user password on disk so we can create a new PostgreSQL database
        # cluster. Password must be set because we're turning 'trust'
        # authentication off, and there's no other option since this script is
        # not executed interactively.
        echo '${{ inputs.password }}' > $PWFILE

        # There are couple of reasons why we need to create a new PostgreSQL
        # database cluster:
        #
        # * TODO
        #  --auth="scram-sha-256" \
        initdb \
          --username="${{ inputs.username }}" \
          --pwfile="$PWFILE" \
          --auth-local="trust" \
          --auth-host="scram-sha-256" \
          --encoding="UTF-8" \
          --locale="en_US.UTF-8" \
          --no-instructions

        cat <<EOF > "$PGDATA/postgresql.conf"
        port = ${{ inputs.port }}
        EOF

        # Client authentication is controlled by a host-based authentication
        # configuration file. By default local connections are trusted and do
        # not require password (in fact, passwords are ignored). It's undesired
        # behaviour in our case since in case of CI we want to make sure that
        # the password is configured and passed properly by the application
        # under test.
        # cat <<EOF > "$PGDATA/pg_hba.conf"
        # host all all all scram-sha-256
        # EOF
        pg_ctl start

        # Both PGHOST and PGUSER are used by PostgreSQL tooling such as 'psql'
        # or 'createuser'. Since PostgreSQL data has been recreated, we cannot
        # rely on defaults anymore.
        #
        # PGHOST is required for Linux and macOS since they default to unix
        # sockets, and we have turned them off.
        #
        # PGUSER is required for Windows since default tooling user is
        # 'postgres', while 'pg_ctl init' creates one with the name of the
        # current user.
        #echo "PGHOST=localhost" >> $GITHUB_ENV
        echo "PGPORT=${{ inputs.port }}" >> $GITHUB_ENV
      shell: bash

    - name: Setup PostgreSQL user and database
      run: |
        createuser --createdb ${{ inputs.username }}

        if [ "${{ inputs.database}}" != "postgres" ]; then
          createdb -O ${{ inputs.username }} ${{ inputs.database }}
        fi

        psql -c "ALTER USER ${{ inputs.username }} PASSWORD '${{ inputs.password }}';" ${{ inputs.database }}
      shell: bash

    - name: Expose connection URI
      run: |
        CONNECTION_URI="postgresql://${{ inputs.username }}:${{ inputs.password }}@localhost:${{inputs.port}}/${{ inputs.database }}"
        echo "value=$CONNECTION_URI" >> $GITHUB_OUTPUT
      shell: bash
      id: connection-uri
